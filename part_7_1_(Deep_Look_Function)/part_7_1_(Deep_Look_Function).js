// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// □■□■     deep look in function : 
// □■□■         1 - Review
// □■□■         2 - Functioin Constructor
// □■□■         3 - Function Hosting
// □■□■         4 - Function Invoking         
// □■□■         5 - Function Are Object ⯈⯈⯈ ( so Have their Property && Methods ) 
// □■□■         6 - Function Parameters ⯈⯈⯈ ( ...args && arguments)
// □■□■         7 - Invoke Function with Call() 

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████


// □■□■      function Review
// □■□■              1 - Function ⯈⯈⯈ no return no parameter
// □■□■              2 - Function ⯈⯈⯈ no parameter
// □■□■              3 - Function ⯈⯈⯈ no return 
// □■□■              4 - Function ⯈⯈⯈ with return and parameter
// □■□■              5 - Function ⯈⯈⯈ Invoking


// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      1 - Function ⯈⯈⯈ no return no parameter



// // □■□■     Declarations_1
// function LogSometing() {
//     console.log("Hello There !")
// }
// // □■□■     Invoke Function :
// LogSometing()


// // □■□■     Variable for keep function
// var LogSometing_2

// //      Declarations_2
// LogSometing_2 = function () {
//     console.log("Hello There !")
// }
// // □■□■     Invoke Function :
// LogSometing_2()

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■      2 - Function ⯈⯈⯈ no parameter



// // □■□■      Declarations_1
// max = 0
// numbersList = [14, 15, 16, 100, 1600, -1000, 2000, 1]
// var LogLanguages = function () {
//     for (item of numbersList) {
//         if (max == 0) {
//             max = item
//         } else if (item >= max) {
//             max = item
//         }
//     }
//     return max
// }

// // □■□■      Invoke Function :
// var maxNum = LogLanguages()
// console.log(maxNum)

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■      3 - Function ⯈⯈⯈ no return 


// // □■□■      Declarations_1
// function calculateArea(width, height) {
//     console.log("area = " + width * height)
// }

// // □■□■      Invoke Function :
// calculateArea(3, 2)

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■       4 - Function ⯈⯈⯈ with return and parameter

// // □■□■      Declarations_1
// function calculateSphereArea(radius) {
//     return (4 * Math.pow(radius, 2) * Math.PI)
// }

// // □■□■      Invoke Function :
// console.log(calculateSphereArea(5))
// let area = calculateSphereArea(3)
// console.log(area)

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      use The Function() Constructor

// // □■□■      Declarations_1
// const myFunction = new Function("para1", "para2", "return para1 * para2")

// // □■□■      Invoke Function :
// var multiplied = myFunction(2 , 2)
// console.log(multiplied)


// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      Function Hosting


// // □■□■      Invoke Function :
// var multiplied = myFunction(2 * 2)

// // □■□■      Declarations_1
// var myFunction = new Function("para1", "para2", "return para1 * para2")

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      Self-Invoking Functions


// (
//     function invokeYourSelf() {
//         console.log("I invoke my self !")
//     }())

    
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// □■□■      Functions are Object so ... have their Properties and Methods :

// □■□■      property_1 ⯈⯈⯈ arguments
// □■□■      method     ⯈⯈⯈ toString()

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      property_1 ⯈⯈⯈ arguments


// function getYourArgs(a, b, c, d) { return arguments.length }
// console.log(getYourArgs(1, 2, 3, 4))

// // □■□■      use arg in parameters  
// function getNumberOfArgs(...args) { return arguments.length }
// console.log(getNumberOfArgs(1, 2, 3))
// console.log(getNumberOfArgs(1, 2, 3, 4, 5, 6))


// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■      property_2 ⯈⯈⯈ toString()

// function getInputBack(para1) {
//     return (para1)
// }

// // □■□■      Invoke
// console.log(typeof (getInputBack(5)))
// console.log(typeof (getInputBack(5).toString()))

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      Arrow Function : 

// var logSometing = () => { console.log("Im arrow function !") }
// var logSometing_1 = (para) => (console.log("your Input was : " + para))

// logSometing()
// logSometing_1("Arrow Function")

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      JavaScript Function Parameters


// // □■□■      1 - Miss parameter when invoke
// function logSometing(para) { return para }
// console.log(logSometing())

// // □■□■      2 - gave function more parameter
// function logSometing_1(para1, para2) { return para1 + para2 }
// console.log(logSometing_1(2, 2, 5, 4))


// // □■□■      Default Function Parameters
// function getCircleArea(radius, pi = 3) { return pi * Math.pow(radius, 2) }
// console.log(getCircleArea(5))
// console.log(getCircleArea(5, 3.14))

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■      Function Rest Parameter

// // □■□■      use (...args) to manage extera parameter : 
// function sumForMe(...args) {
//     let sum = 0;
//     for (let arg of args) sum += arg;
//     return sum;
// }

// var value = sumForMe(1, 2, 3, 4, 5)

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■      The Arguments Object Deeper look :

// var myList = Array(5, 10, 15, 20, 30, 40, 50, 60)

// function checkList() {
//     for (let i = 0; i <= arguments.length; i++) {
//         for (let j = 0; j <= myList.length; j++) {
//             if (arguments[i] == myList[j] && arguments[i] != undefined) {
//                 console.log("The " + (i + 1) + " value you inter exist in the list. " + " value : " + arguments[i])
//             }
//         }
//     }
// }

// // □■□■ invoke function : 
// checkList(5)
// checkList(5, 15)

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// □■□■      this keyword in function : 
// □■□■              1 - usually refer to global object 
// □■□■              2 - in strict mode this refer to undefined

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// function showMeWhatYouGot() {
//     console.log(this)
// }
// showMeWhatYouGot()

// // □■□■      in strict mode

// function showMeWhatYouGot_2() {
//     "use strict";

//     console.log(this)
// }
// showMeWhatYouGot_2()

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// // □■□■      The JavaScript call() Method
// // □■□■          * The call() method is a predefined JavaScript method.
// // □■□■          * It can be used to invoke (call) a method with an owner object as an argument (parameter).


// var person = {
//     firstName: "alireza",
//     lastName: "moghadasi",
//     giveFullName: function () {
//         console.log(this.firstName + " " + this.lastName)
//     }
// }

// var name_1 = {
//     firstName : "Mohammad",
//     lastName : "Rezaii"
// }

// var name_2 = {
//     firstName : "Sadaf",
//     lastName : "Taheri"
// }

// person.giveFullName()
// person.giveFullName.call(name_1)
// person.giveFullName.call(name_2)

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■      call function with more args : 

// var car = {
//     giveMeInformation: function(carYear , amount) {
//         console.log("The " + this.carName + " Created in " + carYear + "  " + " price : " + amount)
//     }
// }

// var car_1 = {
//     carName : "X" ,
// }
// var car_2 = {
//     carName : "Y"
// }

// car.giveMeInformation.call(car_1 , "1980" , "1800000T")
// car.giveMeInformation.call(car_2 , "2000" , "15000000T")


// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// □■□■      Next Part_2 : 
// □■□■          1 - function Apply 
// □■□■          2 - Function Bind
// □■□■          3 - Function 

// □■□■      Next Part_3 : 
// □■□■          1 - Async VS sync
// □■□■          2 - CallBack function 
// □■□■          3 - promises function
// □■□■          4 - Async / Await