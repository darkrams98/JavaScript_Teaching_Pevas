// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// Timing Events : 
// The window object allows execution of code at specified time intervals.

// setTimeout(function, milliseconds)
// Executes a function, after waiting a specified number of milliseconds.

// setInterval(function, milliseconds)
// Same as setTimeout(), but repeats the execution of the function continuously.

// Tips :
// The setTimeout() and setInterval() are both methods of the HTML BOM Window object.

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// □■□■ setTimeout Structure :
// □■□■     window.setTimeout(function, milliseconds);
// □■□■     without the window prefix ⟶ setTimeout()

// □■□■ parameters : 
// □■□■     The first parameter is a function to be executed.
// □■□■     The second parameter indicates the number of milliseconds before execution

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ Code_1 -- use in HTML

// function Alert_1 () {
//     alert("I have been showed after 3 seconds!")
// }

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ Code_2 -- use in javascript

// function creatTimeOutVar_1() { mySetTime_1 = setTimeout(Alert_2, 3000) }

// function Alert_2() {
//     console.log("I have been showed after 3 seconds!")
//     console.log(typeof (mySetTime_1))
// }

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ Code_3 -- use in arrow function 

// function creatTimeOutVar_2() {
//     mySetTime_2 = setTimeout(() => { console.log("Arrow function Log after 3 second !") }, 3000)
// }


// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████


// □■□■ Stop the Execution setTimeout :

// □■□■ structure_1 :
// □■□■     window.clearTimeout(timeoutVariable)

// □■□■ structure_2 : 
// □■□■      myVar = setTimeout(function, milliseconds);
// □■□■      clearTimeout(myVar);

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ Code_1

// function delay_Func() { console.log("My setTimeout will be removed !") }

// myBool = true;
// function creatTimeOutVar_3() {
//     if (myBool == true) {
//         mySetTime_3 = setTimeout(delay_Func, 3000)
//     }else console.log("setTimeout has been removed !")
// }

// function rmTimeOut_1() {
//     mySetTime_3 = setTimeout(delay_Func, 3000)
//     if (myBool == true) {
//         clearTimeout(mySetTime_3)
//         myBool = false
//     }
// }

// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████
// ██████████████████████████████████████████████████████████████████████████████████████████████████████████████

// □■□■ setInterval() Structure : 
// □■□■     window.setInterval(function, milliseconds);
// □■□■     setInterval(function, milliseconds);

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ Code_1 -- separate form 

// function showLog () {
//     console.log("I'll execute each 2 second !")
// }

// setInterval(showLog , 2000)

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ Code_2 -- function and setInterval together

// let number = 1
// setInterval(function showLog() {
//     console.log("I Executed " + number + " Time !")
//     number++
// } , 2000)

// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒

// // □■□■ BTC price ticker : 

// var result
// function loadData(callback) {
//     const xhttp = new XMLHttpRequest();
//     xhttp.onload = function () {
//         result = JSON.parse(this.response);
//         callback(result)
//     }
//     xhttp.open("GET", "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd");
//     xhttp.setRequestHeader('Access-Control-Allow-Headers', '*');
//     xhttp.setRequestHeader('Access-Control-Allow-Origin', '*');
//     xhttp.setRequestHeader('Access-Control-Allow-Origin', "$http_origin");


//     xhttp.send();
// }
// loadData(logData)

// // Update price each in Interval : 
// function logData(data) {
//     setInterval(() => {
//         console.log(data[0].high_24h)

//         document.getElementById("sell_price").innerHTML = "<p>" + data[0].high_24h + "</p>"
//         document.getElementById("buy_price").innerHTML = "<p>" + data[0].high_24h + "</p>"

//     }

//         , 5000)
// }


// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒
// █▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒█▒▒▒▒▒▒▒▒▒